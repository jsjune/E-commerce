version: "3.8"
services:
  mysql-member:
    image: mysql:8.0
    networks:
      - ecommerce_network
    environment:
      - MYSQL_ROOT_PASSWORD=1234
    ports:
      - "0:3306"
    volumes:
      - ./sql/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

  mysql-order:
    image: mysql:8.0
    networks:
      - ecommerce_network
    environment:
      - MYSQL_ROOT_PASSWORD=1234
    ports:
      - "0:3306"
    volumes:
      - ./sql/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

  mysql-payment:
    image: mysql:8.0
    networks:
      - ecommerce_network
    environment:
      - MYSQL_ROOT_PASSWORD=1234
    ports:
      - "0:3306"
    volumes:
      - ./sql/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

  mysql-delivery:
    image: mysql:8.0
    networks:
      - ecommerce_network
    environment:
      - MYSQL_ROOT_PASSWORD=1234
    ports:
      - "0:3306"
    volumes:
      - ./sql/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

  mysql-product:
    image: mysql:8.0
    networks:
      - ecommerce_network
    environment:
      - MYSQL_ROOT_PASSWORD=1234
    ports:
      - "0:3306"
    volumes:
      - ./sql/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql

  redis:
    image: redis
    networks:
      - ecommerce_network
    ports:
      - "6379:6379"


  zookeeper:
    image: 'arm64v8/zookeeper:3.8'
    networks:
      - ecommerce_network
    ports:
      - '2181:2181'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_TLS_CLIENT_AUTH=none
      - ZOO_TLS_QUORUM_CLIENT_AUTH=none

  kafka:
    image: 'bitnami/kafka:3.4.0'
    ports:
      - '9092:9092'
    networks:
      - ecommerce_network
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_LISTENERS=LC://kafka:29092,LX://kafka:9092,CONTROLLER://:9093 # CONTROLLER 추가
      - KAFKA_CFG_ADVERTISED_LISTENERS=LC://kafka:29092,LX://${DOCKER_HOST_IP:-localhost}:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=LC:PLAINTEXT,LX:PLAINTEXT,CONTROLLER:PLAINTEXT # CONTROLLER 추가
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=LC
    depends_on:
      - zookeeper

  kafka-ui:
    image: provectuslabs/kafka-ui
    networks:
      - ecommerce_network
    container_name: kafka-ui
    ports:
      - "8989:8080"
    restart: always
    depends_on:
      - kafka
      - zookeeper
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181

  ecommerce-logging:
    image: e-commerce-logging-consumer:0.0.1
    networks:
      - ecommerce_network
    ports:
      - "0:8080"

  ecommerce-discovery:
    image: e-commerce-discovery-service:0.0.1
    networks:
      - ecommerce_network
    ports:
      - "8761:8761"

  ecommerce-gateway:
    image: e-commerce-apigateway-service:0.0.1
    depends_on:
      - ecommerce-discovery
    networks:
      - ecommerce_network
    ports:
      - "8000:8000"

  ecommerce-member:
    image: e-commerce-member-core:0.0.1
    depends_on:
      - ecommerce-discovery
      - mysql-member
      - redis
    networks:
      - ecommerce_network
    ports:
      - "0:8080"

  ecommerce-product:
    image: e-commerce-product-core:0.0.1
    depends_on:
      - ecommerce-discovery
      - mysql-product
      - redis
    networks:
      - ecommerce_network
    ports:
      - "0:8080"

  ecommerce-product-consumer:
    image: e-commerce-product-consumer:0.0.1
    depends_on:
      - ecommerce-discovery
      - mysql-product
      - redis
    networks:
      - ecommerce_network
    ports:
      - "0:8080"

#  ecommerce-product-scheduler:
#    image: e-commerce-product-scheduler:0.0.1
#    depends_on:
#      - ecommerce-discovery
#      - mysql-product
#      - redis
#    networks:
#      - ecommerce_network
#    ports:
#      - "0:8080"

  ecommerce-payment:
    image: e-commerce-payment-core:0.0.1
    depends_on:
      - ecommerce-discovery
      - mysql-payment
    networks:
      - ecommerce_network
    ports:
      - "0:8080"

  ecommerce-payment-consumer:
    image: e-commerce-payment-consumer:0.0.1
    depends_on:
      - ecommerce-discovery
      - mysql-payment
    networks:
      - ecommerce_network
    ports:
      - "0:8080"

#  ecommerce-payment-scheduler:
#    image: e-commerce-payment-scheduler:0.0.1
#    depends_on:
#      - ecommerce-discovery
#      - mysql-payment
#    networks:
#      - ecommerce_network
#    ports:
#      - "0:8080"

  ecommerce-order:
    image: e-commerce-order-core:0.0.1
    depends_on:
      - ecommerce-discovery
      - mysql-order
      - redis
    networks:
      - ecommerce_network
    ports:
      - "0:8080"

  ecommerce-order-consumer:
    image: e-commerce-order-consumer:0.0.1
    depends_on:
      - ecommerce-discovery
      - mysql-order
      - redis
    networks:
      - ecommerce_network
    ports:
      - "0:8080"

#  ecommerce-order-scheduler:
#    image: e-commerce-order-scheduler:0.0.1
#    depends_on:
#      - ecommerce-discovery
#      - mysql-order
#      - redis
#    networks:
#      - ecommerce_network
#    ports:
#      - "0:8080"

  ecommerce-delivery:
    image: e-commerce-delivery-core:0.0.1
    depends_on:
      - ecommerce-discovery
      - mysql-delivery
    networks:
      - ecommerce_network
    ports:
      - "0:8080"

  ecommerce-delivery-consumer:
    image: e-commerce-delivery-consumer:0.0.1
    depends_on:
      - ecommerce-discovery
      - mysql-delivery
    networks:
      - ecommerce_network
    ports:
      - "0:8080"

#  ecommerce-delivery-scheduler:
#    image: e-commerce-delivery-scheduler:0.0.1
#    depends_on:
#      - ecommerce-discovery
#      - mysql-delivery
#    networks:
#      - ecommerce_network
#    ports:
#      - "0:8080"

networks:
  ecommerce_network:
    driver: bridge
