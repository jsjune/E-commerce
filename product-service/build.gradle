plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.6'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'com.palantir.docker' version '0.35.0'
    id 'jacoco'
}

group = 'com.productservice'
version = '0.0.1'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // querydsl
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-netflix-eureka-client
    implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:4.1.0'

    // https://mvnrepository.com/artifact/io.awspring.cloud/spring-cloud-starter-aws
    implementation 'io.awspring.cloud:spring-cloud-starter-aws:2.4.4'
    implementation 'javax.xml.bind:jaxb-api:2.3.1'

    // https://mvnrepository.com/artifact/net.coobird/thumbnailator
    implementation 'net.coobird:thumbnailator:0.4.20'

    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-openfeign
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign:4.1.0'

    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-sleuth
    implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'

    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-starter-zipkin
    implementation 'org.springframework.cloud:spring-cloud-starter-zipkin:2.2.8.RELEASE'

    // kafka
    implementation 'org.springframework.kafka:spring-kafka'

    implementation 'org.redisson:redisson-spring-boot-starter:3.27.2'

    // https://mvnrepository.com/artifact/org.testcontainers/testcontainers
    testImplementation 'org.testcontainers:testcontainers:1.19.7'
    // https://mvnrepository.com/artifact/org.testcontainers/kafka
    testImplementation 'org.testcontainers:kafka:1.19.7'

    // actuator
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

}

// QueryDsl 디렉토리 경로
def querydslSrcDir = 'src/main/generated/querydsl'

clean {
    delete file(querydslSrcDir)
}

tasks.withType(JavaCompile) {
    options.generatedSourceOutputDirectory = file(querydslSrcDir)
}

// 도커
docker {
    println(tasks.bootJar.outputs.files)
    name rootProject.name + '-' + project.name.toLowerCase() + ":" + version
    dockerfile file('../Dockerfile')
    files tasks.bootJar.outputs.files
    buildArgs(['JAR_FILE': tasks.bootJar.outputs.files.singleFile.name])
}

test {
    useJUnitPlatform()
//    finalizedBy jacocoTestReport
}

// jacooc
jacocoTestReport {
    dependsOn test
    finalizedBy jacocoTestCoverageVerification

    excludedClassFilesForReport(classDirectories)
}

private excludedClassFilesForReport(classDirectories) {
    classDirectories.setFrom(
            files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        "**/protobuf/**",
                        "**/*Application*",
                        "**/*Config*",
                        "**/entity/Q*",
                        "**/common/Q*",
                        "**/S3Utils*"
                ])
            })
    )
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            includes = ['com.**.usecase.**']

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }

        }
    }
}
